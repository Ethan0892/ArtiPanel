services:
  # PostgreSQL Database - Using host PostgreSQL (already installed)
  # Uncomment the section below if you want to use Docker PostgreSQL instead
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: artipanel-postgres
  #   environment:
  #     POSTGRES_DB: ${DB_NAME:-artipanel}
  #     POSTGRES_USER: ${DB_USER:-artipanel}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD:-changeMe123}
  #     POSTGRES_INITDB_ARGS: "-c shared_buffers=128MB -c max_connections=50"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "${DB_PORT:-5433}:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-artipanel}"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  #     start_period: 30s
  #   restart: unless-stopped
  #   networks:
  #     - artipanel-network
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 256M
  #       reservations:
  #         memory: 128M

  # Redis Cache - Minimal memory configuration
  redis:
    image: redis:7-alpine
    container_name: artipanel-redis
    command: redis-server --appendonly yes --maxmemory 64mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - artipanel-network
    # Memory limit for lightweight setup
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

  # Backend API Server - Optimized for production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: artipanel-api
    depends_on:
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: ${PORT:-4000}
      DATABASE_URL: postgresql://${DB_USER:-artipanel}:${DB_PASSWORD:-changeMe123}@host.docker.internal:5432/${DB_NAME:-artipanel}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this}
      API_URL: ${API_URL:-http://localhost:4000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8000}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      NODE_OPTIONS: "--max-old-space-size=256"
    ports:
      - "${PORT:-4000}:4000"
    restart: unless-stopped
    networks:
      - artipanel-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Memory limit for lightweight setup
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend Web UI - Using Nginx for efficiency
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: artipanel-frontend
    depends_on:
      - backend
    environment:
      VITE_API_URL: ${API_URL:-http://localhost:4000/api}
    ports:
      - "8000:3000"
    restart: unless-stopped
    networks:
      - artipanel-network
    # Memory limit for lightweight setup
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

# Optional: Nginx Reverse Proxy (comment out if not needed for lighter setup)
# Uncomment the nginx service below if you want a reverse proxy
# Otherwise, frontend and backend are directly accessible

volumes:
  redis_data:
    driver: local

networks:
  artipanel-network:
    driver: bridge
